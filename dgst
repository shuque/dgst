#!/usr/bin/env python
#
# dgst: compute a cryptographic digest of input files or stdin,
# analogous to the "openssl dgst -md5|-sha1|-sha256|-sha512" command.
# Requires the "hashlib" module, in python >= 2.5
#
# Usage: dgst [md5|sha1|sha256|sha384|sha512] [file1 file2 ...]
#
# Author: Shumon Huque <shuque@gmail.com>
#

import sys, os, hashlib

HASHFUNC = dict(md5    = hashlib.md5,
                sha1   = hashlib.sha1,
                sha224 = hashlib.sha224,
                sha256 = hashlib.sha256,
                sha384 = hashlib.sha384,
                sha512 = hashlib.sha512)

def usage():
    junk = sys.stderr.write(
        "Usage: dgst [md5|sha1|sha256|sha384|sha512] [file1 file2 ...]\n")
    sys.exit(1)


def compute_hash(func, file):
    h = func()
    for line in file:
        h.update(line)
    return h.hexdigest()


if __name__ == '__main__':

    if len(sys.argv) < 2:
        usage()

    hashtype = sys.argv[1]
    if hashtype not in HASHFUNC:
        usage()
    func = HASHFUNC[hashtype]

    if sys.argv[2:]:
        for arg in sys.argv[2:]:
            if os.path.isfile(arg) != 1:
                sys.stderr.write("ERROR: {} isn't a file\n".format(arg))
            else:
                print("%s(%s)= %s" % (hashtype, arg, 
                                      compute_hash(func, open(arg, 'rb'))))
    else:
        try:
            stdin_fp = sys.stdin.buffer          # python3
        except AttributeError:
            stdin_fp = sys.stdin                 # python2

        print("%s(STDIN)= %s" % (hashtype, compute_hash(func, stdin_fp)))

    sys.exit(0)
